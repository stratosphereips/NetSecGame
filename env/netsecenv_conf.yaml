# Configuration file for the NetSecGame environment

coordinator:
  # Define the conf for all the 'attacker' agents.
  agents:
    Attacker:
      goal:
        description: "Exfiltrate data to '213.47.23.195'"
        is_any_part_of_goal_random: True
        known_networks: []
        #known_networks: [192.168.1.0/24, 192.168.3.0/24]
        known_hosts: []
        #known_hosts: [192.168.1.1, 192.168.1.2]
        controlled_hosts: []
        #controlled_hosts: [213.47.23.195, 192.168.1.3]
        # Services are defined as a target host where the service must be, and then a description in the form 'name,type,version,is_local'
        known_services: {}
        #known_services: {192.168.1.3: [Local system, lanman server, 10.0.19041, False], 192.168.1.4: [Other system, SMB server, 21.2.39421, False]}
        # In data, put the target host that must have the data and which data in format user,data
        # Example to fix the data in one host
        known_data: {213.47.23.195: [[User1,DataFromServer1]]}
        # Example to fix two data in one host
        #known_data: {213.47.23.195: [[User1,DataFromServer1], [User5,DataFromServer5]]}
        # Example to fix the data in two host
        #known_data: {213.47.23.195: [User1,DataFromServer1], 192.168.3.1: [User3,Data3FromServer3]}
        # Example to ask a random data in a specific server. Putting 'random' in the data, forces the env to randomly choose where the goal data is
        # known_data: {213.47.23.195: [random]}

      start_position:
        known_networks: []
        known_hosts: []
        # The attacker must always at least control the CC if the goal is to exfiltrate there
        # Example of fixing the starting point of the agent in a local host
        controlled_hosts: [213.47.23.195, random]
        # Example of asking a random position to start the agent
        # controlled_hosts: [213.47.23.195, random]
        # Services are defined as a target host where the service must be, and then a description in the form 'name,type,version,is_local'
        known_services: {}
        # known_services: {192.168.1.3: [Local system, lanman server, 10.0.19041, False], 192.168.1.4: [Other system, SMB server, 21.2.39421, False]}
        # Same format as before
        known_data: {}

    Defender:
      goal:
            description: "Block all attackers"
            is_any_part_of_goal_random: False
            known_networks: []
            # Example
            #known_networks: [192.168.1.0/24, 192.168.3.0/24]
            known_hosts: []
            # Example
            #known_hosts: [192.168.1.1, 192.168.1.2]
            controlled_hosts: []
            # Example
            #controlled_hosts: [213.47.23.195, 192.168.1.3]
            # Services are defined as a target host where the service must be, and then a description in the form 'name,type,version,is_local'
            known_services: {}
            # Example
            #known_services: {192.168.1.3: [Local system, lanman server, 10.0.19041, False], 192.168.1.4: [Other system, SMB server, 21.2.39421, False]}
            # In data, put the target host that must have the data and which data in format user,data
            # Example to fix the data in one host
            known_data: {}
            # Example to fix two data in one host
            #known_data: {213.47.23.195: [[User1,DataFromServer1], [User5,DataFromServer5]]}
            # Example to fix the data in two host
            #known_data: {213.47.23.195: [User1,DataFromServer1], 192.168.3.1: [User3,Data3FromServer3]}
            # Example to ask a random data in a specific server. Putting 'random' in the data, forces the env to randomly choose where the goal data is
            # known_data: {213.47.23.195: [random]}
            blocked_ips: {all_attackers}

      start_position:
            known_networks: [all_local]
            known_hosts: [all_local]
            # The attacker must always at least control the CC if the goal is to exfiltrate there
            # Example of fixing the starting point of the agent in a local host
            controlled_hosts: [all_local]
            # Example of asking a random position to start the agent
            # controlled_hosts: [213.47.23.195, random]
            # Services are defined as a target host where the service must be, and then a description in the form 'name,type,version,is_local'
            known_services: {all_local}
            # known_services: {192.168.1.3: [Local system, lanman server, 10.0.19041, False], 192.168.1.4: [Other system, SMB server, 21.2.39421, False]}
            # Same format as before
            known_data: {all_local}
            # Blocked IPs
            blocked_ips: {}

env:
  # random means to choose the seed in a random way, so it is not fixed
  random_seed: 'random'
  # Or you can fix the seed
  # random_seed: 42
  scenario: 'scenario1'
  max_steps: 100
  store_replay_buffer: False
  use_dynamic_addresses: False
  use_firewall: True
  save_trajectories: False
  goal_reward: 100
  detection_reward: -5
  step_reward: -1
  actions:
    scan_network:
      prob_success: 1.0
    find_services:
      prob_success: 1.0
    exploit_service:
      prob_success: 1.0
    find_data:
      prob_success: 1.0
    exfiltrate_data:
      prob_success: 1.0
    block_ip:
      prob_success: 1.0